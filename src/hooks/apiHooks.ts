import {MediaItem, MediaItemWithOwner} from '../types/DBTypes';
import {useEffect, useState} from 'react';
import { fetchData } from '../functions';
import { Credentials } from '../types/localTypes';
import { LoginResponse, MediaResponse, UploadResponse, UserResponse } from '../types/MessageTypes';
// DONE: add necessary imports
const useMedia = () => {
  // DONE: move mediaArray state here
  const [mediaArray, setMediaArray] = useState<MediaItemWithOwner[]>([]);


  // DONE: move getMedia function here
  // DONE: move useEffect here

  const getMediaWithOwners = async () => {
    try {
      const mediaItems = await fetchData<MediaItem[]>(`${import.meta.env.VITE_MEDIA_API}/media`);
      const mediaItemsWithOwners: Promise<MediaItemWithOwner>[] = mediaItems.map(async (item) => {
        const userData = await fetchData<{ username: string }>(`${import.meta.env.VITE_AUTH_API}/users/${item.user_id}`);
        return { ...item, username: userData.username };
      });
      const result = await Promise.all(mediaItemsWithOwners);
      console.log(result); // Log the array of media items with owners
      setMediaArray(result);
    } catch (error) {
      console.error('getMediaWithOwners', error);
    }
  };

  useEffect(() => {
    getMediaWithOwners();
  }, []);


  const postMedia = async (file: UploadResponse, inputs: Record<string, string>,
    token: string) => {
        // TODO: create a suitable object for Media API, the type is MediaItem without media_id, user_id, thumbnail and created_at. All those are generated by the API. Remember to add app_id from .env.local
        const media: Omit<MediaItem, 'media_id' | 'user_id' | 'thumbnail' | 'created_at'> = {
          title: inputs.title,
          description: inputs.description,
          filename: file.data.filename,
          filesize: file.data.filesize,
          media_type: file.data.media_type,
        };
        // TODO: post the data to Media API and get the data as MediaResponse
        const options = {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: 'Bearer ' + token,
          },
          body: JSON.stringify(media),
        };
        return fetchData<MediaResponse>(import.meta.env.VITE_MEDIA_API + '/media', options);
        // TODO: return the data
    };

  return {mediaArray, postMedia};
  };


  const useAuthentication = () => {
    const postLogin = async (creds: Credentials) => {
      try {
        return await fetchData<LoginResponse>(
          import.meta.env.VITE_AUTH_API + '/auth/login',
          {
            method: 'POST',
            body: JSON.stringify(creds),
            headers: {
              'Content-Type': 'application/json',
            },
          },
        );
      } catch (error) {
        console.error(error);
      }
    };

    return {postLogin};
  };

  const useUser = () => {
    // TODO: implement network functions for auth server user endpoints
    const getUserByToken = async (token: string) => {
      const options = {
        headers: {
          Authorization: 'Bearer ' + token,
        },
      };
      return await fetchData<UserResponse>(
        import.meta.env.VITE_AUTH_API + '/users/token/',
        options,
      );

    };

    const postUser = async (user: Record<string, string>) => {
      const options: RequestInit = {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(user),
      };

      await fetchData<UserResponse>(
        import.meta.env.VITE_AUTH_API + '/users',
        options,
      );
    };

    const getUsernameAvailable = async (username: string) => {
      const result = await fetchData<{available: boolean}>(
        import.meta.env.VITE_AUTH_API + '/users/username/' + username
      );
      return result;
    };

    const getEmailAvailable = async (email: string) => {
      const result = await fetchData<{available: boolean}>(
        import.meta.env.VITE_AUTH_API + '/users/email/' + email
      );
      return result;
    };


    return {getUserByToken, postUser, getUsernameAvailable, getEmailAvailable};

  };

  const useFile = () => {
    const postFile = async (file: File, token: string) => {
      // TODO: create FormData object
      const formData = new FormData();
      // TODO: add file to FormData
      formData.append('file', file);
      // TODO: upload the file to file server and get the file data
      const options = {
        method: 'POST',
        headers: {
          Authorization: 'Bearer ' + token,
        },
        body: formData,
      };
      // TODO: return the file data. The type is UploadResponse
      return await fetchData<UploadResponse>(
        import.meta.env.VITE_UPLOAD_SERVER + '/upload',
        options,
      );
    }
    return {postFile};
  };


  export {useMedia, useAuthentication, useUser, useFile};
